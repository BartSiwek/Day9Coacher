<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>